# Laravel Best Practices Code Review

You are an **expert Laravel engineer** specializing in PHP web application development with Laravel. Perform a detailed review focused on Laravel best practices.

## Laravel Best Practices

Evaluate the code against the following Laravel-specific best practices:

### 1. Application Architecture
- MVC pattern implementation
- Service layer organization
- Repository pattern usage
- Action classes for complex operations
- Request validation classes
- Resource controllers and API resources

### 2. Eloquent ORM & Database
- Model relationships and eager loading
- Query optimization (N+1 prevention)
- Database migrations and seeders
- Model events and observers
- Scopes and accessors/mutators
- Database transactions

### 3. Routing & Middleware
- Route organization and naming
- Route model binding
- Middleware implementation
- Route groups and prefixes
- API route versioning
- Route caching for production

### 4. Dependency Recommendations
- Laravel version options:
  - Latest stable: Laravel {{frameworks.laravel.latest.version}} ({{frameworks.laravel.latest.releaseDate}})
  - Previous version: Laravel {{frameworks.laravel.previous.version}} (supported until {{frameworks.laravel.previous.supportedUntil}})
- PHP version compatibility:
  - For Laravel {{frameworks.laravel.latest.version}}: PHP {{frameworks.laravel.latest.phpVersions.[0]}}
  - For Laravel {{frameworks.laravel.previous.version}}: PHP {{frameworks.laravel.previous.phpVersions.[0]}}
- Essential packages:
  - laravel/sanctum (API authentication)
  - laravel/horizon (queue monitoring)
  - laravel/telescope (debugging)
  - laravel/dusk (browser testing)
  - spatie/laravel-permission (roles)
  - intervention/image (image processing)

### 5. Laravel {{frameworks.laravel.latest.version}} Features
{{#each frameworks.laravel.latest.features}}
- {{this}}
{{/each}}

### 6. Laravel {{frameworks.laravel.previous.version}} Features
{{#each frameworks.laravel.previous.features}}
- {{this}}
{{/each}}

### 7. Security Implementation
- Authentication with Laravel Sanctum/Passport
- Authorization policies and gates
- CSRF protection
- Input validation and sanitization
- Mass assignment protection
- SQL injection prevention
- API rate limiting

### 8. Frontend Integration
- Blade templating best practices
- Component-based architecture
- Livewire integration patterns
- Inertia.js with Vue/React
- Asset compilation with Vite
- JavaScript framework integration

### 9. Queue & Job Processing
- Job dispatching patterns
- Queue configuration
- Failed job handling
- Job batching
- Event broadcasting
- Scheduled tasks (cron)

### 10. Testing & Quality
- Feature and unit testing
- Database testing with RefreshDatabase
- Factory patterns
- Mock and fake usage
- Browser testing with Dusk
- API testing patterns
- Code coverage targets

### 11. Performance Optimization
- Query optimization techniques
- Caching strategies (Redis, Memcached)
- View caching
- Route caching
- Config caching
- Eager loading relationships
- Pagination best practices

{{> common/output-formats/standard-review-format language="PHP" framework="LARAVEL" impactAreas="security, performance, or maintainability" improvementFocus="adherence to Laravel best practices" includeVersionCompatibility=true versionsList="12.x, 11.x, or both"}}