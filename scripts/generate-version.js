#!/usr/bin/env node

/**
 * @fileoverview Script to generate src/version.ts from package.json
 *
 * This script reads the version from package.json and generates a TypeScript
 * file that exports the version constant. This ensures a single source of truth
 * for the version and eliminates potential mismatches between package.json and CLI.
 * 
 * Additionally, this script now manages build numbers to track deployments.
 */

const fs = require('fs');
const path = require('path');

// Read package.json
const packageJsonPath = path.join(__dirname, '..', 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const version = packageJson.version;

// Read current build info
const buildNumberPath = path.join(__dirname, '..', 'build-number.json');
let buildInfo = null;
let buildNumber = 0;

try {
  if (fs.existsSync(buildNumberPath)) {
    buildInfo = JSON.parse(fs.readFileSync(buildNumberPath, 'utf8'));
    buildNumber = buildInfo.buildNumber || 0;
  }
} catch (error) {
  console.warn('Warning: Could not read build-number.json:', error);
}

// Generate version.ts content with build number
const versionTsContent = `/**
 * Auto-generated version file from package.json
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-version.js
 */

export const VERSION = '${version}';
export const BUILD_NUMBER = ${buildNumber};
export const VERSION_WITH_BUILD = '${version} (build ${buildNumber})';
`;

// Write to src/version.ts
const versionTsPath = path.join(__dirname, '..', 'src', 'version.ts');
fs.writeFileSync(versionTsPath, versionTsContent);

console.log(`ðŸ“¦ Generating version file from package.json...`);
console.log(`âœ… Generated version.ts with version '${version} (build ${buildNumber})'`);
