#!/usr/bin/env node

/**
 * Script to increment the build number during the build process.
 * 
 * WHY: We need to track each build to verify deployments.
 * This script is called during the build process to increment
 * the build number and update the build-number.json file.
 * 
 * DESIGN DECISION: This is a separate script from generate-version.js
 * because we want to increment only during actual builds, not every
 * time version.ts is generated (which happens during tests too).
 */

const fs = require('fs');
const path = require('path');

// Read package.json to get current version
const packageJsonPath = path.join(__dirname, '..', 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
const currentVersion = packageJson.version;

// Path to build-number.json
const buildNumberPath = path.join(__dirname, '..', 'build-number.json');

// Read existing build info or create new
let buildInfo = {
  buildNumber: 0,
  version: currentVersion,
  lastBuild: new Date().toISOString()
};

try {
  if (fs.existsSync(buildNumberPath)) {
    const existingInfo = JSON.parse(fs.readFileSync(buildNumberPath, 'utf8'));
    
    if (existingInfo.version === currentVersion) {
      // Same version, increment build number
      buildInfo.buildNumber = existingInfo.buildNumber + 1;
      console.log(`Incrementing build number from ${existingInfo.buildNumber} to ${buildInfo.buildNumber}`);
    } else {
      // Version changed, reset build number
      console.log(`Version changed from ${existingInfo.version} to ${currentVersion}, resetting build number to 0`);
      buildInfo.buildNumber = 0;
    }
  } else {
    console.log('Creating new build-number.json with build number 0');
  }
} catch (error) {
  console.warn('Warning: Could not read build-number.json, starting fresh:', error);
}

// Update timestamp
buildInfo.lastBuild = new Date().toISOString();

// Write updated build info
fs.writeFileSync(buildNumberPath, JSON.stringify(buildInfo, null, 2));

console.log(`✅ Build number updated: ${currentVersion} (build ${buildInfo.buildNumber})`);
console.log(`   Last build: ${buildInfo.lastBuild}`);

// Now regenerate version.ts with the new build number
const versionTsContent = `/**
 * Auto-generated version file from package.json
 * DO NOT EDIT MANUALLY - This file is generated by scripts/generate-version.js
 */

export const VERSION = '${currentVersion}';
export const BUILD_NUMBER = ${buildInfo.buildNumber};
export const VERSION_WITH_BUILD = '${currentVersion} (build ${buildInfo.buildNumber})';
`;

const versionTsPath = path.join(__dirname, '..', 'src', 'version.ts');
fs.writeFileSync(versionTsPath, versionTsContent);

console.log(`✅ Updated src/version.ts with build ${buildInfo.buildNumber}`);