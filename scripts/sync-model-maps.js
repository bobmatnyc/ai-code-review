#!/usr/bin/env node

/**
 * @fileoverview Script to generate JavaScript version of model maps from TypeScript source
 * 
 * This script reads the TypeScript model map data and generates a JavaScript version
 * for use in Node.js scripts that don't have TypeScript transpilation.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Paths
const tsDataDir = path.join(__dirname, '..', 'src', 'clients', 'utils', 'modelMaps', 'data');
const outputPath = path.join(__dirname, 'model-maps.js');

// Build the TypeScript files to ensure we have the latest
console.log('Building TypeScript files...');
try {
  execSync('npm run build:types', { stdio: 'inherit' });
} catch (error) {
  console.warn('Warning: Could not build TypeScript files, using existing build');
}

// Read and combine all provider data files
const providers = ['gemini', 'anthropic', 'openai', 'openrouter'];
let combinedModelMap = {};
let combinedModels = {};

for (const provider of providers) {
  const distPath = path.join(__dirname, '..', 'dist', 'clients', 'utils', 'modelMaps', 'data', `${provider}.js`);
  
  try {
    // Clear require cache to get fresh data
    delete require.cache[require.resolve(distPath)];
    
    // Import the provider data
    const providerData = require(distPath);
    
    // Extract MODEL_MAP entries
    if (providerData.default && providerData.default.MODEL_MAP) {
      Object.assign(combinedModelMap, providerData.default.MODEL_MAP);
    }
    
    // Extract MODELS entries
    if (providerData.default && providerData.default.MODELS) {
      Object.assign(combinedModels, providerData.default.MODELS);
    }
    
    console.log(`✅ Loaded ${provider} model data`);
  } catch (error) {
    console.error(`❌ Could not load ${provider} data: ${error.message}`);
  }
}

// Generate the JavaScript file
const jsContent = `/**
 * @fileoverview Node.js version of the modelMaps.ts file.
 * This file contains the model mappings for the validation scripts.
 * 
 * AUTO-GENERATED FILE - DO NOT EDIT
 * Generated by: scripts/sync-model-maps.js
 * Generated at: ${new Date().toISOString()}
 */

// Model map from TypeScript source
const MODEL_MAP = ${JSON.stringify(combinedModelMap, null, 2)};

// Models list from TypeScript source
const MODELS = ${JSON.stringify(combinedModels, null, 2)};

/**
 * Get API name for a model key
 * @param {string} key Model key
 * @returns {string} API name
 */
function getApiNameFromKey(key) {
  const model = MODEL_MAP[key];
  return model ? model.apiName : key;
}

/**
 * Get model mapping for a key
 * @param {string} key Model key
 * @returns {object|undefined} Model mapping
 */
function getModelMapping(key) {
  return MODEL_MAP[key];
}

/**
 * Check if a model supports tool calling
 * @param {string} modelKey Model key
 * @returns {boolean} Whether the model supports tool calling
 */
function supportsToolCalling(modelKey) {
  const model = MODEL_MAP[modelKey];
  return model ? model.supportsToolCalling || false : false;
}

module.exports = {
  MODEL_MAP,
  MODELS,
  getApiNameFromKey,
  getModelMapping,
  supportsToolCalling
};
`;

// Write the file
fs.writeFileSync(outputPath, jsContent);
console.log(`✅ Generated ${outputPath}`);
console.log(`   Total models: ${Object.keys(combinedModelMap).length}`);