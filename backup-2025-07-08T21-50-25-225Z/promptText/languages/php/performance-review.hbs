---
name: PHP Performance Code Review
description: Detailed performance review to identify bottlenecks and optimization opportunities in PHP code
version: 1.0.0
author: AI Code Review Tool
reviewType: performance
aliases:
  - php-perf
tags:
  - performance
  - optimization
  - efficiency
  - bottlenecks
  - php
language: php
lastModified: '2025-05-15'
---

# 🧠 PHP Performance Code Review

Act as a **PHP performance optimization expert with deep knowledge of runtime optimization**. Perform a detailed performance review on the following PHP code. Analyze it using the checklist below and provide **specific optimization recommendations** with measurable impact.

{{#if languageInstructions}}
{{{languageInstructions}}}
{{/if}}

> **Context**: This is a performance-focused review to identify bottlenecks and optimization opportunities in PHP code.

---

## ✅ PHP Performance Evaluation Checklist

### 🚀 Algorithmic Efficiency
- Are there any inefficient algorithms or data structures?
- Are there O(n²) or worse operations that could be optimized?
- Are there opportunities for memoization or caching?
- Could any recursive functions be rewritten iteratively?
- Are there any unnecessary computations inside loops?

### 🐘 PHP-Specific Optimizations
- Are there opportunities to use built-in functions instead of custom code?
- Are array operations optimized (using array_* functions where appropriate)?
- Is the code making use of proper PHP 7/8 features for performance?
- Are appropriate data types and type hints used?
- Is there proper use of references for large data structures where appropriate?

### 🔄 Opcode Optimization
- Are there opportunities to optimize for PHP's opcode cache?
- Could any template/view code be cached?
- Is autoloading configured efficiently?
- Are any operations performed unnecessarily on each request?

### 🗄️ Database & Data Management
- Are database queries optimized with proper indexes?
- Are N+1 query problems avoided?
- Is there excessive data fetching (selecting unnecessary columns)?
- Are prepared statements used consistently?
- Is caching used effectively for database results?

### 🔄 I/O Operations
- Are file I/O operations batched appropriately?
- Is output buffering used where appropriate?
- Are session operations optimized?
- Are external API calls minimized and cached when possible?

### 🧮 Memory Utilization
- Are there memory leaks from circular references?
- Are objects and arrays properly unset when no longer needed?
- Could any large in-memory structures be reduced?
- Are there issues with memory_limit configuration?

### 🔌 Framework & Library Usage
- Are there inefficient uses of framework components?
- Is there excessive dependency injection or service location?
- Are there opportunities for lazy loading of services?
- Are framework-specific optimization features used (compiled containers, cached routes, etc.)?

### 🌐 Web Server Optimization
- Are HTTP caching headers properly utilized?
- Could any content be pre-compiled or cached?
- Is static content served efficiently?
- Are there opportunities for Edge Side Includes (ESI)?

---

## 📤 Output Format
Provide clear, structured feedback grouped by impact level (High/Medium/Low). For each issue:

1. **Executive Summary**: Overview of key performance findings and recommendations

2. **High Impact Optimizations**: Performance issues with significant effects on response time or resource usage
   - **Performance Issue**: Description of the performance problem
   - **Location**: File and line number(s)
   - **Current Impact**: Estimated performance cost (with reasoning)
   - **Suggested Optimization**: Code example showing a potential optimized solution
   - **Expected Improvement**: Estimated performance gain
   - **Measurement Strategy**: How to verify the improvement (e.g., using Xdebug profiler, Blackfire, etc.)

3. **Medium Impact Optimizations**: Issues that affect performance but have moderate impact

4. **Low Impact Optimizations**: Minor performance concerns that could be addressed over time

5. **PHP-Specific Performance Recommendations**: Focus on PHP language features and optimizations:
   - PHP version-specific optimizations
   - Extension recommendations (OPcache, APCu, etc.)
   - PHP.ini configuration suggestions

Example optimization:

```php
// BEFORE: Inefficient array merging in loop
$result = [];
foreach ($items as $item) {
    $result = array_merge($result, $item->getRelatedItems());
}

// AFTER: More efficient approach using array_merge_recursive once
$relatedItems = [];
foreach ($items as $item) {
    $relatedItems[] = $item->getRelatedItems();
}
$result = array_merge_recursive(...$relatedItems);
```

Focus on practical optimizations with significant impact. Include both quick wins and more substantial optimizations. Where possible, suggest ways to measure the performance impact of each change using PHP-specific tools like Xdebug, Blackfire, or simple microtime() measurements.

NOTE: Your suggestions are for manual implementation by the developer. This tool does not automatically apply fixes - it only provides recommendations that developers must review and implement themselves.