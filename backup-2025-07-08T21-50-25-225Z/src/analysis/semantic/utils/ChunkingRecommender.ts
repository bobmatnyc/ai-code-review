/**
 * @fileoverview Chunking recommendation utilities for semantic analysis
 *
 * This module provides functions to generate chunking recommendations
 * for code review, including AI-guided and rule-based approaches.
 */

import logger from '../../../utils/logger';
import type {
  ChunkingRecommendation,
  ChunkingStrategy,
  ComplexityMetrics,
  Declaration,
  ImportRelationship,
  SemanticAnalysis,
} from '../types';

/**
 * Generate AI-guided chunking recommendation
 * @param aiGuidedChunking AI-guided chunking instance
 * @param declarations Extracted declarations
 * @param imports Import relationships
 * @param complexity Complexity metrics
 * @param totalLines Total lines of code
 * @param filePath File path
 * @param language Programming language
 * @param reviewType Review type
 * @returns Chunking recommendation
 */
export async function generateChunkingRecommendation(
  aiGuidedChunking: {
    isAvailable: () => boolean;
    generateChunkingRecommendation: (
      analysis: SemanticAnalysis,
      reviewType: string,
    ) => Promise<ChunkingRecommendation>;
  },
  declarations: Declaration[],
  imports: ImportRelationship[],
  complexity: ComplexityMetrics,
  totalLines: number,
  filePath: string,
  language: string,
  reviewType = 'quick-fixes',
): Promise<ChunkingRecommendation> {
  try {
    // Create a semantic analysis object for AI-guided chunking
    const analysisForChunking: SemanticAnalysis = {
      language,
      totalLines,
      topLevelDeclarations: declarations,
      importGraph: imports,
      complexity,
      suggestedChunkingStrategy: {
        strategy: 'individual',
        chunks: [],
        crossReferences: [],
        reasoning: '',
        estimatedTokens: 0,
        estimatedChunks: 0,
      },
      filePath,
      analyzedAt: new Date(),
    };

    // Use AI-guided chunking if available
    if (aiGuidedChunking.isAvailable()) {
      logger.debug('Using AI-guided chunking recommendation');
      return await aiGuidedChunking.generateChunkingRecommendation(analysisForChunking, reviewType);
    }
    logger.debug('AI-guided chunking not available, using rule-based fallback');
    return generateRuleBasedChunking(declarations, complexity, totalLines);
  } catch (error) {
    logger.warn(
      `AI-guided chunking failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
    );
    logger.debug('Falling back to rule-based chunking');
    return generateRuleBasedChunking(declarations, complexity, totalLines);
  }
}

/**
 * Generate rule-based chunking recommendation as fallback
 * @param declarations Extracted declarations
 * @param complexity Complexity metrics
 * @param totalLines Total lines of code
 * @param maxChunkSize Maximum chunk size in lines
 * @returns Chunking recommendation
 */
export function generateRuleBasedChunking(
  declarations: Declaration[],
  complexity: ComplexityMetrics,
  totalLines: number,
  maxChunkSize = 500,
): ChunkingRecommendation {
  let strategy: ChunkingStrategy = 'individual';

  if (complexity.classCount > 0) {
    strategy = 'hierarchical';
  } else if (declarations.length > 10) {
    strategy = 'grouped';
  } else if (complexity.cyclomaticComplexity > 20) {
    strategy = 'functional';
  }

  // Estimate number of chunks based on strategy and code size
  let estimatedChunks = 1;
  if (strategy === 'hierarchical') {
    estimatedChunks = Math.max(1, complexity.classCount + complexity.functionCount);
  } else if (strategy === 'grouped') {
    estimatedChunks = Math.max(1, Math.ceil(declarations.length / 5));
  } else if (strategy === 'functional') {
    estimatedChunks = Math.max(1, complexity.functionCount);
  } else {
    estimatedChunks = Math.max(1, Math.ceil(totalLines / maxChunkSize));
  }

  return {
    strategy,
    chunks: [], // Will be generated by ChunkGenerator
    crossReferences: [], // Will be analyzed by ChunkGenerator
    reasoning: `Rule-based: Selected ${strategy} strategy based on ${declarations.length} declarations and complexity ${complexity.cyclomaticComplexity}`,
    estimatedTokens: totalLines * 4, // Rough estimate
    estimatedChunks,
  };
}
