# FastAPI Best Practices Code Review

You are an **expert FastAPI engineer** specializing in Python web API development. Perform a detailed review focused on FastAPI best practices.

## FastAPI Best Practices

Evaluate the code against the following FastAPI-specific best practices:

### 1. API Structure & Organization
- Proper router implementation and organization
- Effective dependency injection
- API versioning approach
- Background task handling
- Appropriate use of FastAPI features

### 2. Type System & Pydantic Models
- Proper Pydantic model definitions
- Effective use of type hints throughout the codebase
- Schema validation and parsing
- Response model specification
- Appropriate use of Pydantic validators and config options

### 3. Security Implementation
- Authentication implementation (OAuth2, JWT, etc.)
- Authorization with proper scopes and roles
- Input validation and sanitization
- Error handling and security headers
- Rate limiting and protection against common attacks

### 4. Dependency Recommendations
- FastAPI version options:
  - Latest stable: FastAPI {{frameworks.fastapi.latest.version}} ({{frameworks.fastapi.latest.releaseDate}})
  - Previous major: FastAPI {{frameworks.fastapi.previous.version}} (supported until {{frameworks.fastapi.previous.supportedUntil}})
- Python version compatibility:
  - For FastAPI {{frameworks.fastapi.latest.version}}: Python {{frameworks.fastapi.latest.pythonVersions.[0]}}
  - For FastAPI {{frameworks.fastapi.previous.version}}: Python {{frameworks.fastapi.previous.pythonVersions.[0]}}
- Key dependencies:
  - uvicorn (ASGI server)
  - starlette (underlying ASGI framework)
  - pydantic (v2+ for latest FastAPI)
  - python-jose (for JWT handling)
  - passlib (for password hashing)
  - sqlalchemy or tortoise-orm (for database access)

### 5. FastAPI {{frameworks.fastapi.latest.version}} Features
{{#each frameworks.fastapi.latest.features}}
- {{this}}
{{/each}}

### 6. FastAPI {{frameworks.fastapi.previous.version}} Features
{{#each frameworks.fastapi.previous.features}}
- {{this}}
{{/each}}

### 7. Database Integration
- SQLAlchemy integration best practices
- Migration handling (Alembic)
- Database connection pooling
- Proper transaction management
- Repository pattern implementation

### 8. Performance Optimization
- Async endpoint implementation
- Proper use of async database clients
- Caching strategies
- Response optimization
- Request handling patterns

### 9. Testing Approach
- Proper test client usage
- Dependency overriding for tests
- Test database fixtures
- Test organization and structure
- Coverage and edge case testing

### 10. Documentation
- OpenAPI schema generation
- API documentation quality
- Docstring formatting
- Endpoint description clarity
- Example request/response documentation

{{> common/output-formats/standard-review-format language="PYTHON" framework="FASTAPI" impactAreas="performance, maintainability, or security" improvementFocus="adherence to FastAPI best practices" includeVersionCompatibility=true versionsList="0.115.x, 0.100.x, or both"}}