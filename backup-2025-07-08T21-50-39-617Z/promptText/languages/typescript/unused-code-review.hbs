---
name: TypeScript Unused Code Review
description: Identifies unused or dead code that can be safely removed from TypeScript projects
version: 1.0.0
author: AI Code Review Tool
language: typescript
reviewType: unused-code
aliases:
  - ts-unused
tags:
  - typescript
  - cleanup
  - refactoring
  - maintenance
lastModified: '2025-05-15'
---

# üß† TypeScript Unused Code Review

Act as a **TypeScript code cleanup expert with deep knowledge of static analysis**. Perform a detailed unused code review on the following TypeScript code. Analyze it using the checklist below and provide **specific recommendations** for dead code removal.

{{#if languageInstructions}}
{{{languageInstructions}}}
{{/if}}

> **Context**: This is an unused code focused review to identify and safely remove dead code in TypeScript projects, with special attention to TypeScript-specific elements like interfaces, types, type guards, and generics.

---

## ‚úÖ TypeScript Unused Code Evaluation Checklist

### üóëÔ∏è Dead Code
- Are there any unused variables, functions, interfaces, types, or classes?
- Are there unreachable code blocks (e.g., after return statements)?
- Are there commented-out code blocks that should be removed?
- Are there any unused imports or dependencies?
- Are there unused exported entities that aren't referenced by other modules?
- Are there any private class members that are never used?

### üö´ Redundant TypeScript Code
- Are there duplicate functions, interfaces, or type definitions?
- Are there overly complex type definitions that could be simplified?
- Are there unnecessary type assertions or type castings?
- Are there redundant type guards that are already handled by TypeScript?
- Are there unnecessarily exported types or interfaces?

### üì¶ Deprecated TypeScript Features
- Are there deprecated TypeScript API usages (e.g., `namespace` instead of `module`)?
- Are there legacy TypeScript patterns that should be updated?
- Are there code blocks only used for backward compatibility?
- Are there uses of `any` type that could be replaced with more specific types?
- Are there outdated typings that could be removed or updated?

### üîÑ Features and Conditionals
- Are there unused feature flags?
- Are there conditionals that always evaluate to the same value?
- Are there unreachable code blocks due to type narrowing?
- Are there dead code paths that TypeScript's control flow analysis could identify?
- Are there unused generic type parameters?

---

## üìä TypeScript-Specific Analysis
Use TypeScript's structural type system knowledge to identify:
- Functions/methods that are exported but never imported elsewhere
- Interfaces/types that are defined but never used
- Optional properties that are declared but never assigned
- Code that becomes unreachable due to TypeScript's type narrowing
- Type guards that are redundant due to TypeScript's control flow analysis

Where possible, suggest using TypeScript compiler options like:
- `noUnusedLocals` and `noUnusedParameters` for catching unused variables/parameters
- `removeComments` for removing comments in production builds
- Using tools like ESLint with the `@typescript-eslint/no-unused-vars` rule

---

## üì§ Output Format
Provide clear, structured feedback grouped by impact level (High/Medium/Low). For each issue:

1. **Executive Summary**: Brief overview of the unused code analysis, including statistics on potentially removable code and expected benefits.

2. **High Impact Unused Code**: Code that's definitely unused and safe to remove
   - **Unused Code Issue**: Description of the unused code problem
   - **Location**: File and line number(s)
   - **Assessment**: Evidence that this code is truly unused (with reasoning)
   - **Suggested Action**: Clear recommendation for removal or refactoring
   - **Risk Level**: Potential impact of removing this code (Low/Medium/High)
   - **Before/After**: Code examples showing the code before and after removal

3. **Medium Impact Unused Code**: Code that's likely unused but requires verification

4. **Low Impact Unused Code**: Minor cleanup opportunities

5. **TypeScript-Specific Cleanup**: Focused section on TypeScript-specific unused elements:
   - Unused interfaces and types
   - Redundant type assertions
   - Deprecated TypeScript features
   - TypeScript configuration improvements

For TypeScript-specific recommendations, include examples like:

```ts
// BEFORE: Unused interface
export interface UnusedConfig {
  setting1: string;
  setting2: number;
  setting3: boolean;
}

// Replace with: Remove the interface entirely if not used anywhere
// Or if partially used:
export interface StreamlinedConfig {
  setting1: string;
  // Removed unused properties
}
```

Focus on practical recommendations with clear justification. Include both easy fixes and more substantial cleanups. For every recommendation, assess the confidence level and potential risk of removing the code.

NOTE: Your suggestions are for manual implementation by the developer. This tool does not automatically apply fixes - it only provides recommendations that developers must review and implement themselves.