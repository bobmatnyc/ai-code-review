import { ReviewResult } from '../types/review';

/**
 * Format the review output based on the specified format
 * @param review Review result to format
 * @param format Output format (markdown or json)
 * @returns Formatted review output
 */
export function formatReviewOutput(review: ReviewResult, format: string): string {
  if (format === 'json') {
    return formatAsJson(review);
  }

  return formatAsMarkdown(review);
}

/**
 * Format the review as JSON
 * @param review Review result to format
 * @returns JSON string
 */
function formatAsJson(review: ReviewResult): string {
  // Create a copy of the review with additional metadata
  const reviewWithMeta = {
    ...review,
    meta: {
      model: review.isMock ? 'Mock Response' : 'Google Gemini 2.5 Max',
      generatedAt: new Date(review.timestamp).toISOString(),
      costEstimation: review.cost
    }
  };

  return JSON.stringify(reviewWithMeta, null, 2);
}

/**
 * Format the review as Markdown
 * @param review Review result to format
 * @returns Markdown string
 */
function formatAsMarkdown(review: ReviewResult): string {
  const { filePath, reviewType, content, timestamp, cost, isMock } = review;

  // Determine if this is a real or mock response
  const modelInfo = isMock
    ? 'Mock Response (No API Key)'
    : 'Google Gemini 2.5 Max';

  // Format cost information if available
  let costInfo = '';
  if (cost) {
    costInfo = `

## Cost Information
- Input tokens: ${cost.inputTokens.toLocaleString()}
- Output tokens: ${cost.outputTokens.toLocaleString()}
- Total tokens: ${cost.totalTokens.toLocaleString()}
- Estimated cost: ${cost.formattedCost}`;
  }

  return `# Code Review: ${filePath}

> **Review Type**: ${reviewType}
> **Generated**: ${new Date(timestamp).toLocaleString()}

---

${content}

---${costInfo}

*Generated by Code Review Tool using ${modelInfo}*`;
}
