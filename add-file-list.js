#!/usr/bin/env node

/**
 * Script to add a list of analyzed files to existing architectural reviews.
 * 
 * Usage: node add-file-list.js <review-file-path>
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Get the review file path from command line arguments
const reviewPath = process.argv[2];

if (!reviewPath) {
  console.error('Please provide a path to a review file');
  process.exit(1);
}

// Verify the review file exists
if (!fs.existsSync(reviewPath)) {
  console.error(`Review file not found: ${reviewPath}`);
  process.exit(1);
}

// Parse the target directory from the review file
function extractTargetFromReview(reviewContent) {
  const targetMatch = reviewContent.match(/# Code Review: (.+)/);
  if (targetMatch && targetMatch[1]) {
    const target = targetMatch[1].replace(' (Current Directory)', '');
    return target;
  }
  return null;
}

// Add file list to the review
function addFileList(reviewPath, targetDir) {
  console.log(`Adding file list to ${reviewPath}`);
  console.log(`Target directory: ${targetDir}`);
  
  // Read review file
  const review = fs.readFileSync(reviewPath, 'utf8');
  
  // Extract target directory
  const targetFromReview = extractTargetFromReview(review);
  const targetDirectory = targetFromReview || targetDir;
  
  console.log(`Using target directory: ${targetDirectory}`);
  
  // Ensure target directory exists
  if (!targetDirectory || !fs.existsSync(targetDirectory)) {
    console.error(`Target directory not found: ${targetDirectory}`);
    process.exit(1);
  }
  
  // Get files in target directory
  const files = getFilesInDirectory(targetDirectory);
  console.log(`Found ${files.length} files in target directory`);
  
  // Generate file list section
  const fileListSection = `
## Files Analyzed

The following ${files.length} files were included in this review:

${files.map(file => `- \`${file}\``).join('\n')}
`;

  // Find the position to insert (before cost information section)
  const costSectionMatch = review.match(/^## Cost Information/m);
  
  let updatedReview;
  if (costSectionMatch && costSectionMatch.index) {
    // Insert before cost information
    const position = costSectionMatch.index;
    console.log('Inserting file list before Cost Information section');
    updatedReview = 
      review.substring(0, position) +
      fileListSection +
      review.substring(position);
  } else {
    // If cost section not found, append at the end but before the footnote
    const footnoteMatch = review.match(/\*Generated by Code Review Tool using .+\*$/);
    if (footnoteMatch && footnoteMatch.index) {
      const position = footnoteMatch.index;
      console.log('Appending file list before footnote');
      updatedReview = 
        review.substring(0, position) +
        fileListSection + '\n' +
        review.substring(position);
    } else {
      // If footnote not found, just append at the end
      console.log('Appending file list to end');
      updatedReview = review + fileListSection;
    }
  }
  
  // Write updated review back to file
  fs.writeFileSync(reviewPath, updatedReview);
  console.log('File list added successfully');
}

// Helper function to get files in a directory recursively
function getFilesInDirectory(directory) {
  const ignorePatterns = [
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**',
    '**/coverage/**',
    '**/.git/**',
    '**/ai-code-review-docs/**'
  ];
  
  // Get all files recursively
  const files = glob.sync('**/*', {
    cwd: directory,
    ignore: ignorePatterns,
    nodir: true
  });
  
  return files;
}

// Main execution
try {
  // Get the target directory - try to parse from review file first
  const reviewContent = fs.readFileSync(reviewPath, 'utf8');
  const targetDir = extractTargetFromReview(reviewContent);
  
  // If we couldn't extract the target, use the current working directory
  const effectiveTargetDir = targetDir || process.cwd();
  
  // Add file list to the review
  addFileList(reviewPath, effectiveTargetDir);
} catch (error) {
  console.error('Error processing review file:', error);
  process.exit(1);
}